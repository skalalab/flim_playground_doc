<style>
.quarto-title-block {
  display: none;
}
.quarto-title {
  display: none;
}
</style>

![](logo.gif){width=300px fig-align="center"}

# Quick Start

Welcome to the FLIM Playground ðŸ¥³ðŸŽ‰ðŸ¥‚! It is an interactive graphical user interface (GUI) that allows you to extract single cell features from FLIM raw data ([Data Extraction](data_extraction.qmd)) and analyze extracted features or datasets extracted yourself using a built-in repertoire of methods ([Data Analysis](data_analysis.qmd)). 

To quickly try out different analysis methods, download this [sample dataset] and try the [online demo](https://flim-playground.streamlit.app/). If you prefer to use your own data, read [data analysis configuration](data_analysis_config.qmd) to learn how to configure the system.

![](analysis_ui_shots/feature_comparison.png){width=100% fig-align=center}

Due to the online limitation, extracting features from raw data is not available in the demo. Read on to learn more about the system, including how to [download](#download) and use the desktop app, from processing raw decay data to gaining insights.

# Installation

The system is built entirely in Python and is open-source. 

## Download
Download the desktop app from [GitHub](https://github.com/skalalab/flim_playground) and double click it to run. Releases are available for Windows 11 and Mac OS 15. If your operating system is not either of these, you can build it yourself by following the instructions below.

## Build it yourself
1. Clone the repo and navigate into the repository once cloned.

2. Install the python environment
    - Install uv if not yet installed
    - run `uv sync`
3. Build the app
    - run `pyinstaller Flim-Playground.spec --clean`

# Introduction

Fluorescence lifetime imaging microscopy (FLIM) measures the time it takes for a fluorescent molecule from being excited by a pulse of light (entering excited state) to emitting light (returning to the ground state). It is sensitive to changes in fluorophore microenvironment including conformational changes with protein binding and the presence of quenchers. Coupled with modern automated cell-segmentation methods [@stringer2021], FLIM enables single-cell analyses that reveal biological heterogeneity.

::: {.callout-note collapse="true"}
# Instrumentation

To acquire FLIM data, a light sourceâ€”typically a pulsed laser for time-domain methods or a modulated continuous-wave source for frequency-domain methodsâ€”is used to excite the fluorophore. The emission is detected using instrumentation capable of resolving fluorescence decay, such as time-correlated single-photon counting (TCSPC), time-gated detectors, or phase/modulation-based detection. In time-domain FLIM, the delay between excitation and photon arrival is measured, and often a histogram is built, with x-axis being the delay time and y-axis being the number of photons falling into each time bin. Similar to film (e.g., 24 frames per second) versus photo, FLIM has an additional dimension of time (e.g., 256 time bins per 12.5 nanoseconds) compared to intensity images. 

In frequency-domain FLIM, the phase shift and modulation depth of the emission relative to the excitation are determined. 
:::
Because the FLIM workflow is [fragmented](#challenges) across [multiple levels](#levels-of-data) and [stages](#stages-of-workflow), researchers often rely on a patchwork of ad hoc scripts and specialized software. However, switching between methods or transitioning between stages usually requires coding expertise, introduces errors, and slows discovery. 

**FLIM Playground** removes these hurdles with an interactive code-free graphical user interface (GUI) that spans the full pipeline. It integrates validation checks that guide users at every step, and built-in repertoire of analytical methods with interactive widgets that encourage hypothesis driven, iterative exploration of large datasets. A modular architecture also enables incorporation of new algorithms as tools evolve.

::: {.callout-important}
# Scope of FLIM Playground
It currently supports TCSPC-based FLIM only. It can also be extended to support other time-domain acquisition methods such as the Gating method.  
:::

# Challenges
INSERT FIGURE HERE (FIGURE 1)

The flexibility of the FLIM workflow allows researchers to acquire data in different formats and extract data and insights using different methods, but it also introduces fragmentation across the workflow. 

## Levels of Data
At each level (â€¢), fragmentation stems from the diverse input types (â—¦).

- <span style="color: #1f77b4;">**Pixel**</span>
- <span style="color: #ff7f0e;">**Region of Interest (ROI)**</span>
  - Whole cell mask
  - Cytoplasm mask
  - Nucleus mask
  - Stain mask, etc. 
- <span style="color: #2ca02c;">**Channel**</span>
  - Different fluorophores
  - Different calibration files
  - Different ROI masks
- <span style="color: #d62728;">**Field of View (FOV)**</span>
  - different file formats from different vendors (e.g., `.sdt`, `.ptu`)
  - different dimensions (e.g., `XYT`, `CXYT`)
- <span style="color: #9467bd;">**Experiment**</span>
  - different treatment, different time points, different conditions, etc.


## Stages of Workflow
A diverse set of [tools](https://www.phasorpy.org/docs/stable/phasor_approach/#software) are available, though each of them solves the problem at a particular stage (â€¢) using a subset of available methods (â–ª).

To integrate all the stages require frameworks that take into account all the stages and all [data levels](#levels-of-data) (<span style="color: #1f77b4;">â– </span> <span style="color: #ff7f0e;">â– </span> <span style="color: #2ca02c;">â– </span> <span style="color: #d62728;">â– </span> <span style="color: #9467bd;">â– </span>) 


- [Data Extraction Configuration](data_extraction_config.qmd): <span style="color: #2ca02c;">â– </span> 
- [Metadata organization](fov_metadata.qmd): <span style="color: #2ca02c;">â– </span> <span style="color: #d62728;">â– </span> 
- [Numerical Feature Extraction](numerical_feature_extraction.qmd)
  - [Calibration](numerical_feature_extraction.qmd#calibration): <span style="color: #2ca02c;">â– </span> <span style="color: #d62728;">â– </span> 
    - [Fit Calibration](numerical_feature_extraction.qmd#fit-calibration)
    - [Fit Free Calibration](numerical_feature_extraction.qmd#fit-free-calibration)
      - [IRF Shift](numerical_feature_extraction.qmd#shift-irf)
      - [Reference Dye](numerical_feature_extraction.qmd#reference-dye)
  - Lifetime extraction: <span style="color: #ff7f0e;">â– </span> <span style="color: #2ca02c;">â– </span> <span style="color: #d62728;">â– </span>
    - [Fitting](lifetime_fit.qmd)
    - [Phasor](lifetime_fit_free.qmd)
  - Intensity-based feature extraction: <span style="color: #ff7f0e;">â– </span> <span style="color: #2ca02c;">â– </span> <span style="color: #d62728;">â– </span>
    - [Morphology](intensity_morphology.qmd)
    - [Texture](intensity_texture.qmd)
- [Categorical feature extraction](categorical_feature_extraction.qmd): <span style="color: #ff7f0e;">â– </span> <span style="color: #9467bd;">â– </span> 
- [Data Analysis](data_analysis.qmd) (Visualization + Statistical Modeling): <span style="color: #ff7f0e;">â– </span> <span style="color: #d62728;">â– </span>  <span style="color: #9467bd;">â– </span>
  - [Univariate analysis](data_analysis.qmd#univariate-analysis)
    - [Feature Comparison](feature_comparison.qmd)
    - [Feature Histogram](feature_histogram.qmd)
    - [Field of View Comparison](fov_comparison.qmd)
  - [Bivariate analysis](data_analysis.qmd#bivariate-analysis)
    - [Feature Distribution](feature_distribution.qmd)
  - [Multivariate analysis](data_analysis.qmd#multivariate-analysis)
    - [Dimension Reduction](dimension_reduction.qmd)
    - [Classification](classification.qmd)

# Solution
FLIM Playground divides the workflow into two independent sections:

- [Data Extraction](data_extraction.qmd) that extracts features from the raw data
- [Data Analysis](data_analysis.qmd) that analyzes the extracted features from the Data Extraction section or data extracted by other means using visualizations and statistical modeling.

Data Extraction addresses the fragmentation among data types and extraction methods by adopting a [channel-centric framework](#data_extraction_config.qmd#channel-centric-framework) that offers flexibility without incurring too much overhead for the user. 

Data Analysis addresses the fragmentation among analysis methods by deploying a [shared framework](#data_analysis.qmd#shared-interactive-widgets) across all analysis methods, enabling the same interactive and frictionless exploration experience. 

INSERT FIGURE HERE (FIGURE 2)

# Design

Columns of any tabular data can be categorized into three sets:

- identifiers: unique row identifier and (optional) field of view identifier
- categorical features: conceptually help us group the rows (e.g. the categorical feature `treatment` will group the rows into different treatment groups)
- numerical features: quantify the differences between data groups

**Science, from the data perspective, is about closing the conceptual categorical gaps with quantitative measurements.**

[Data Extraction](data_extraction.qmd) and [Data Analysis](data_analysis.qmd) are designed with the above categorization in mind. 
