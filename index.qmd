<style>
.quarto-title-block {
  display: none;
}
.quarto-title {
  display: none;
}
</style>

![](logo.gif){width=300px fig-align="center"}

# Quick Start

Welcome to the FLIM Playground ðŸ¥³ðŸŽ‰ðŸ¥‚! It is an interactive graphical user interface (GUI) that allows you to extract single cell features from FLIM raw data ([Data Extraction](data_extraction.qmd)) and analyze extracted features or datasets extracted via other methods using a built-in repertoire of methods ([Data Analysis](data_analysis.qmd)). 

To quickly try out different analysis methods, download this [sample dataset] and try the [online demo](https://flim-playground.streamlit.app/). If you prefer to use your own data, read [data analysis configuration](data_analysis_config.qmd) to learn how to configure the system.

![](analysis_ui_shots/feature_comparison.png){width=100% fig-align=center}

Due to the online demo's limitation in local file system access, extracting features from raw data is not available in the demo. Read on to learn more about FLIM Playground from processing raw decay data to gaining insights.

# Installation

FLIM Playground is built entirely in Python and is open-source. 

## Download
Download the desktop app from [GitHub](https://github.com/skalalab/flim_playground) and double click it to run. Releases are available for Windows 11 and Mac OS 15. If your operating system is not either of these, you can build it yourself by following the instructions below.

## Build it yourself
1. Clone the repo and navigate into the repository once cloned.

2. Install the python environment
    - Install uv if not yet installed
    - run `uv sync`
3. Build the app
    - run `pyinstaller Flim-Playground.spec --clean`

# Introduction

Fluorescence lifetime imaging microscopy (FLIM) measures the time it takes for a fluorescent molecule from being excited by a pulse of light (entering excited state) to emitting light (returning to the ground state). It is sensitive to changes in fluorophore microenvironment including conformational changes with protein binding and the presence of quenchers. Coupled with modern automated cell-segmentation methods [@stringer2021], FLIM enables single-cell analyses that reveal biological heterogeneity.

::: {.callout-note collapse="true"}
# Instrumentation

To acquire FLIM data, a light sourceâ€”typically a pulsed laser for time-domain methods or a modulated continuous-wave source for frequency-domain methodsâ€”is used to excite the fluorophore. The emission is detected using instrumentation capable of resolving fluorescence decay, such as time-correlated single-photon counting (TCSPC), time-gated detectors, or phase/modulation-based detection. In time-domain FLIM, the delay between excitation and photon arrival is measured, and often a histogram is built, with x-axis being the delay time and y-axis being the number of photons falling into each time bin. Similar to film (e.g., 24 frames per second) versus photo, FLIM has an additional dimension of time (e.g., 256 time bins per 12.5 nanoseconds) compared to intensity images. 

In frequency-domain FLIM, the phase shift and modulation depth of the emission relative to the excitation are determined. 
:::

# Challenges
A diverse set of [tools](https://www.phasorpy.org/docs/stable/phasor_approach/#software) â€” both open-source and commercial, ranging from libraries to code-free graphical user interfaces (GUIs) â€” are available to extract and analyze FLIM data, providing alternative methods and therefore flexibility to FLIM researchers. Examples include [PhasorPy](https://www.phasorpy.org/) [@phasorpy25], an open-source library for analyzing fluorescence lifetime using the phasor approach; [FLUTE](https://github.com/LaboratoryOpticsBiosciences/FLUTE) [@flute23], an open-source GUI for interactive phasor analysis;  [SPCImage](https://www.becker-hickl.com/products/spcimage/) [@becker2021] a commercial software for fitting and phasor features; and [Prism](https://www.graphpad.com/prism/) a commercial statistical and visualization software.

However, while some tools offer code-free interfaces, users still need to write custom codeâ€”either to prepare data in the proper format as input, or to further process their outputs for downstream analysis. The fragmentation between tools arises because each focuses on only a subset of data levels: <span style="color: #1f77b4;">pixel</span>, <span style="color: #ff7f0e;">cell ROI</span>, <span style="color: #2ca02c;">channel</span> , <span style="color: #d62728;">field of view</span>, and <span style="color: #9467bd;">experiment</span>. 

## Levels of Data

- <span style="color: #1f77b4;">**Pixel**</span>
- <span style="color: #ff7f0e;">**Region of Interest (ROI)**</span>
  - Whole cell mask
  - Cytoplasm mask
  - Nucleus mask
  - Stain mask, etc. 
- <span style="color: #2ca02c;">**Channel**</span>
  - Different fluorophores
  - Different calibration files
  - Different ROI masks
- <span style="color: #d62728;">**Field of View (FOV)**</span>
  - different file formats from various vendors (e.g., `.sdt`, `.ptu`)
  - different dimensions (e.g., `YT`, `YXT`, `CYXT`)
- <span style="color: #9467bd;">**Experiment**</span>
  - different treatment, different time points, different conditions, etc., and combinations thereof

An integrated framework should take into account all data levels <span style="color: #1f77b4;">â– </span> <span style="color: #ff7f0e;">â– </span> <span style="color: #2ca02c;">â– </span> <span style="color: #d62728;">â– </span> <span style="color: #9467bd;">â– </span> (â€¢) while maintaining the flexibility to handle various input types (â—¦). **It should provide a level of abstraction to address fragmentation from data levels and input types**.

Also, FLIM is a rapidly evolving field, and new methods are being developed all the time. An integrated framework should allow users to choose among alternative methods seemlessly, the backbone of iterative explorations integral to research, and be ready to incorporate new methods: **The provided level of abstraction should address fragmentation from extraction and analysis methods**. 

Finally, many of the tools especially GUI softwares are not cross-platform, which limits the accessibility of the tools. The [Installation](#installation) addresses this last challenge.

A closer parallel to FLIM Playground's integrated approach is the combination of [CellProfiler](https://cellprofiler.org/) [@cellprofiler4], which extracts per-object morphological and texture features, and [CellProfiler Analyst](https://cellprofileranalyst.org/) [@cpa21], which ingests these outputs or other feature tables for visualization and statistical analysis. However, FLIM Playground can extract lifetime features from time-resolved data, alongside morphological and texture features from intensity images. Its general data analysis module incorporates FLIM-specific methods (e.g., [phasor analysis](lifetime_fit_free.qmd)) and, beyond training machine learning classifiers, provides statistical models that address additional analysis aspects such as data heterogeneity.
 
# Solution

## Abstraction Level

Inspired by the [data levels](#levels-of-data), tabular data columns can be categorized into three sets:

- identifiers: unique row identifier (<span style="color: #ff7f0e;">â– </span>) and (optional) field of view identifier (<span style="color: #d62728;">â– </span>)
- categorical features: conceptually help us group the rows (e.g., `treatment` will group the rows into different treatment groups) (<span style="color: #ff7f0e;">â– </span> <span style="color: #9467bd;">â– </span>)
- numerical features: quantify the differences/similarities between data groups (<span style="color: #ff7f0e;">â– </span> <span style="color: #2ca02c;">â– </span>)

**Science, from the data perspective, is about closing the conceptual categorical gaps with quantitative measurements.**

## Design
FLIM Playground has two independent sections:

INSERT FIGURE HERE (FIGURE 2)

### Data Extraction

[Data Extraction](data_extraction.qmd) extracts single-cell features from the raw data. It adopts a [framework](#data_extraction_config.qmd#channel-centric-framework) that offers channel-level flexibility in input types and extraction methods without incurring too much overhead for the user. Following the above [categorization](#abstraction-level), it is divided into the following steps:

- [Data Extraction Configuration](data_extraction_config.qmd): allows users to choose among alternative input types and extraction methods (extractors).
- [Metadata organization](fov_metadata.qmd): extracts the field of view identifiers and their configurations
- [Numerical Feature Extraction](numerical_feature_extraction.qmd): extracts single-cell numerical features by user-selected extractors. More extractors can be integrated in the future.
  - [Calibration](numerical_feature_extraction.qmd#calibration): calibrate for IRF shift or use reference dye
  - alternative lifetime extractors: 
    - [Fitting](lifetime_fit.qmd)
    - [Phasor](lifetime_fit_free.qmd)
  - alternative intensity-based extractors:
    - [Morphology](intensity_morphology.qmd)
    - [Texture](intensity_texture.qmd)
- [Categorical feature extraction](categorical_feature_extraction.qmd): extracts single-cell categorical features and combines experiment-level datasets.

### Data Analysis

[Data Analysis](data_analysis.qmd) analyzes featuresâ€”whether extracted through Data Extraction or by other methodsâ€”using visualizations and statistical modeling. It deploys a [shared framework](#data_analysis.qmd#shared-interactive-widgets) built to handle the [three sets of features](#abstraction-level) across all analysis methods, enabling the same interactive and frictionless exploration experience. 

- [Data Analysis](data_analysis.qmd) goes in-depth in how FLIM Playground handles the three sets of features and [Data Analysis Config](data_analysis_config.qmd) goes through how users can configure FLIM Playground to analyze datasets that are not extracted by [Data Extraction](data_extraction.qmd). 

Here is the list of analysis methods, grouped by the number of numerical features they take as input:

- [Univariate analysis](data_analysis.qmd#univariate-analysis)
  - [Feature Comparison](feature_comparison.qmd)
  - [Feature Histogram](feature_histogram.qmd)
  - [Field of View Comparison](fov_comparison.qmd)
- [Bivariate analysis](data_analysis.qmd#bivariate-analysis)
  - [Feature Distribution](feature_distribution.qmd)
- [Multivariate analysis](data_analysis.qmd#multivariate-analysis)
  - [Dimension Reduction](dimension_reduction.qmd)
  - [Classification](classification.qmd)

New methods can be integrated in the future easily, building on the [shared framework](#data_analysis.qmd#shared-interactive-widgets).

## Summary

**FLIM Playground** resolves these [challenges](#challenges) with an interactive code-free graphical user interface (GUI) that spans the full pipeline. It integrates validation checks that guide users at every step, and built-in repertoire of analytical methods with interactive widgets that encourage hypothesis driven, iterative exploration of large datasets. A modular architecture also enables incorporation of new algorithms.