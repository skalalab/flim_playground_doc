# Overview {#sec-data-extraction}

FLIM Playground transforms raw FLIM data into single-cell numerical and categorical features, ensuring smooth integration with [downstream analysis](#sec-data-analysis). All steps are seamlessly connected through interactive widgets, with built-in error checking and reporting to ensure correctness.

A high-level overview of the data extraction process is shown below.
![](Fig2.svg){width=100% fig-align=center}

## Stages 

Users can [configure](#sec-data-extraction-config) the system once and apply it to future data. After configuration, users can extract features from raw data using the following steps, inspired by the [categorization](index.qmd#feature-classes):

![](extraction_ui_shots/extraction_steps.png){width=30% fig-align=center}

1. [FOV Metadata Organization (A)](#sec-fov-metadata): each experiment session consists of multiple fields of view (FOVs). This step helps users organize the metadata of the FOVs. 
2. [Numerical feature extraction (B)](#sec-numerical-feature-extraction): it calibrates and then extracts single cell numerical features. 
    - [Calibration](numerical_feature_extraction.qmd#calibration)
        - [Fit Calibration](numerical_feature_extraction.qmd#fit-calibration)
        - [Fit Free Calibration](numerical_feature_extraction.qmd#fit-free-calibration)
            - [IRF Shift](numerical_feature_extraction.qmd#shift-irf)
            - [Reference Dye](numerical_feature_extraction.qmd#reference-dye)
    - Per-channel feature extraction includes:
        - [Lifetime fitting features](#sec-lifetime-fit): fit an exponential decay curve to the measured decay and extract lifetime features per cell ROI. 
        - [Phasor features](#sec-lifetime-fit-free): calculate the phasor features such as the phasor coordinates. It also provides [phasor analysis](#sec-phasor-analysis). 
        - [Morphology features](#sec-intensity-morphology): calculate morphology features based on the ROI mask. 
        - [Texture features](#sec-intensity-texture): calculate texture features based on the intensity image and the ROI mask. 
3. [Categorical feature extraction (C)](#sec-categorical-feature-extraction): extract the categorical features such as the treatment, time point, etc based on the FOV name.

- Users can then upload the extracted datasets to perform [Data Analysis](#sec-data-analysis). 


## Input File Types

### Decay

See [decay types](data_extraction_config.qmd#decay-types) for more details. 

- 2D decay: 
    - `.csv`: a tabular data sheet with each row representing a cell and each column representing a time bin. 
- 3D/4D decay: besides the spatial dimensions and the time dimension, the extra dimension in the 4D array should be acquisition channels.
    - `.sdt`: Becker & Hickl
    - `.ptu`: PicoQuant

### Mask

Because of the single-cell focus of FLIM Playground, cell-level masks are needed for each channel. Channels can share the same mask, or use different masks (when they use different masks, the mask ID for each cell should match across masks). 

The cell-level mask can focus on different parts of the cell region, such as the whole cell, the cytoplasm, the nucleus, or the stain part. 

For an example, see [here](data_extraction_config.qmd#file-suffix). 

- `.tiff`/`.tif`: a 2D array with background labeled as `0` and each cell ROI region labeled as a unique positive integer. That integer will be part of the [unique cell identifier](data_extraction_config.qmd#cell-identifier).

### IRF 
IRF must be a 1D array. Currently, the supported formats are (extendable to more formats in the future):

- `.txt`: it uses `np.loadtxt` to parse a txt file. It returns a 1D array if the IRF numbers are in one row or in one column.  

### SPCImage t1
If the decay type is [3D/4D pixel-prefitted](data_extraction_config.qmd#three-d4d-pixel-prefitted), users can provide pixel-prefitted lifetime feature files. 

- `.asc`: a 2D array in spatial dimensions outputted by [SPCImage](https://www.becker-hickl.com/products/spcimage/), with each (row, column) containing the value of the lifetime feature (e.g. `t1`: the first component's lifetime) of that pixel.
- Depending on the chosen number of lifetime components, the other pixel-prefitted feature files are included and their names are inferred from the `t1` file, by replacing `t1` in the file name with `t2`, `t3`, `a1[%]`, etc. 

### Reference Dye
If the reference dye-based calibration is chosen, users are expected to provide the reference dye file. 

- `.tiff`/`.tif`: a 3D array, with one dimension representing the time axis. 

### Intensity (2D)

If the channel's [imaging modality](data_extraction_config.qmd#imaging-modality) is `Intensity-only`, users are expected to provide a 2D intensity image in:

- `.tiff`/`.tif`: a 2D array. 

## Limitations

- To simplify the workflow and due to the framework chosen, FLIM Playground does not support pixel-level fitting and fit-free analysis, and there are many other open-source tools that can do so (for a comprehensive list, see [here](https://www.phasorpy.org/docs/stable/phasor_approach/#software)). Instead, it does cell-level fitting and fit-free (phasor) feature extraction by summing up all the decays belonging to the same cell ROI to get one cell-level decay as a preprocessing step [@Samimi2025]. It also accepts prefitted pixel-level lifetime features from [SPCImage](https://www.becker-hickl.com/products/spcimage/) and aggregates pixel-level lifetime features to cell-level lifetime features. 
