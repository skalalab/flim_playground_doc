# Overview

FLIM Playground transforms raw FLIM data into single-cell numerical and categorical features, ensuring smooth integration with [downstream analysis](data_analysis.qmd). All steps are seamlessly connected through interactive widgets, with built-in error checking and reporting to ensure correctness.

The user can [configure](data_extraction_config.qmd) the system once and apply it to future data. After configuration, the user can extract features from raw data using the following steps:

![](extraction_ui_shots/extraction_steps.png){width=30% fig-align=center}

1. [FOV Metadata Organization](fov_metadata.qmd): each experiment sitting consists of multiple field of views (FOVs). This steps helps user organize the metadata of the FOVs. 
2. [Numerical feature extraction](numerical_feature_extraction.qmd): 
    - [Calibration](numerical_feature_extraction.qmd#calibration): it provides [IRF shift-based calibration](numerical_feature_extraction.qmd#irf-shift-calibration) and [reference dye-based calibration](numerical_feature_extraction.qmd#reference-dye-calibration). 
    - Single cell numerical feature extraction including, per channel:
        - [Lifetime fitting features](lifetime_fit.qmd): fit an exponential decay curve to the measured decay and extract lifetime features per cell ROI. 
        - [Phasor features](lifetime_fit_free.qmd): calculate the phasor features such as the phasor coordinates. It also provides [phasor analysis](phasor_analysis.qmd). 
        - [Morphology features](intensity_morphology.qmd): calculate morphology features based on the ROI mask. 
        - [Texture features](intensity_texture.qmd): calculate texture features based on the intensity image and the ROI mask. 
3. [Categorical feature extraction](categorical_feature_extraction.qmd): based on the FOV name, extract the categorical features such as the treatment, time point, etc. 
4. [Data Analysis](data_analysis.qmd): visualize and analyze the extracted features. 

INSERT FIGURE HERE (FIGURE 3)

# Input File Types

## Decay

See [decay types](data_extraction_config.qmd#decay-types) for more details. 

- 2D decay: 
    - `.csv`: a tabular data sheet with each row representing a cell and each column representing a time bin. 
- 3D/4D decay: besides the spatial dimensions and the time dimension, the extra dimension in the 4D array should be channel.
    - `.sdt`: Becker & Hickl
    - `.ptu: PicoQuant

## Mask

Because of the single-cell focus of FLIM Playground, cell-level masks are needed for each channel. Channels can share the same mask, or use different masks (when they use different masks, the mask ID for each cell should match across masks). 

The cell-level mask can focus on different parts of the cell region, such as the whole cell, the cytoplasm, the nucleus, or the stain part. 

For an example, see [here](data_extraction_config.qmd#file-suffix). 

## IRF 
IRF must be a 1D array. Currently, the supported formats are (extendable to more formats in the future):

- `.txt`: it uses `np.loadtxt` to parse a txt file. It will return a 1D array if the IRF numbers are in one row or in one column.  

## a1
If the decay type is [3D/4D pixel-prefitted](data_extraction_config.qmd#3d4d-pixel-prefitted), the user can provide pixel-prefitted lifetime feature files. 

- `.asc`: a 2D array in spatial dimensions, with each (row, column) has the value of the lifetime feature (e.g. `a1`: the fraction of the lifetime component 1) of that pixel, output from [SPCImage](https://www.becker-hickl.com/products/spcimage/). 
- Depending on your chosen number of lifetime components, the other pixel-prefitted features files will be included and their names are inferred from the `a1` file, by replacing `a1[%]` in the file name with `a2[%]`, `a3[%]`, `t1`, etc. 

## Reference Dye
If the reference dye-based calibration is chosen, the user should provide the reference dye file. 

# Limitation

- To simplify the workflow and due to the framework chosen, FLIM Playground does not support pixel-level <span style="color: #1f77b4;">â– </span> fitting and fit free analysis, and there are many other open-source tools that can do so (for a comprehensive list, see [here](https://www.phasorpy.org/docs/stable/phasor_approach/#software)). Instead, it does cell-level fitting and fit free (phasor) feature extraction by summing up all the decays belonging to the same cell ROI to get one cell-level decay as a preprocessing step [@samimi25]. It also accepts prefitted pixel-level lifetime features from [SPCImage](https://www.becker-hickl.com/products/spcimage/) and aggregates pixel-level lifetime features to cell-level lifetime features. 
