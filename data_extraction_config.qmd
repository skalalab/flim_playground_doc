# Configuration {#sec-data-extraction-config}
::: {.callout-note}
Users can configure the system once, and it will be applied to future data. 
:::

Constructing a framework that balances flexibility and usability is about choosing the right abstraction level. FLIM Playground chooses acquisition *channel* from [data levels](index.qmd#data-levels) as the focus and adopt the **channel-centric framework**. Settings are divided into two categories: [cross-channel configurations](#cross-channel-configurations) and [per-channel configurations](#per-channel-configurations).

![](extraction_ui_shots/config.png){width=100% fig-align=center}

## Cross-Channel Configurations

### Categorical Features

![](extraction_ui_shots/config_cat.png){width=80% fig-align=center}

Categorical features are useful to organize the data into groups of interest, and will be used extensively in the [Data Analysis](#sec-data-analysis) module. Users can specify the potential categorical feature names to be extracted in the [Categorical Feature Extraction](#sec-categorical-feature-extraction) step. 

### Decay Types 

FLIM Playground supports different decay types, including 2D decay, 3D/4D decay, and 3D/4D pixel-prefitted decay, through user specification. 

#### 2D Decay {#two-d-decay}

In the system developed by Samimi et al. [@Samimi2024], single cells flow through and a decay curve is acquired for each cell by aggregating all the photon arrival time delays deemed to be from the same cell. In exchange of spatial distribution, the acquisition speed is increased enormously. The output of the system is a tabular data sheet with each row representing a cell and each column representing a time bin. **FLIM Playground currently supports 2D decay in the CSV format.** 

#### 3D/4D Decay {#three-d4d-decay}

In TCSPC-based FLIM, the data is stored in a 3D/4D array and in special format (e.g. `.sdt`, `.ptu`). In addition to the spatial dimensions and the time dimension (`XYT`), the channel dimension may also be present, making it 4 dimensional (`CXYT`). Some systems can also record a time stack, making it has at most 5 dimensions. **FLIM Playground currently supports both `.sdt` and `.ptu` files up to 4 dimensions.** It reads the `duration` and the number of `time bins` from decay file metadata.

#### 3D/4D pixel-prefitted {#three-d4d-pixel-prefitted}

Since FLIM Playground currently does **not** support pixel-fitting, users have the option to provide pixel-prefitted outputs from [SPCImage](https://www.becker-hickl.com/products/spcimage/) in the format of `.asc`. See [here](lifetime_fit.qmd#pixel-prefitted) for how FLIM Playground processes SPCImage outputs to obtain cell-level lifetime fitting features. 

### Identifiers

![](extraction_ui_shots/config_id.png){width=100% fig-align=center}

#### Cell Identifier

Users can specify the column name for the unique identifier of the cell to be stored in the output dataset. The cell identifier is constructed as `{FOV Identifier}_{cell_label}`, where the `cell_label` is the unique integer label in the mask or the row number if the decay type is [2D decay](#2d-decay). 

#### FOV Identifier

Users can specify the column name for the field of view identifier. If the decay type is [2D decay](#2d-decay), users may want to specify the column name as `exp_name`, because the FOV is not image but an experiment. 

### Decay Info

#### Laser frequency

Users can specify the laser frequency in GHz. For example, 0.8 GHz equals to 80 MHz. It will be used in the [phasor analysis](#sec-phasor-analysis). If you do not intend to use the phasor analysis, you can fill in any number. 

#### 2D Decay-specific
Since the [2D decay](#two-d-decay) file does not provide the `duration` and the number of `time bins` per laser pulse interval, users need to specify them. 

![](extraction_ui_shots/config_2d_setting.png){width=100% fig-align=center}

### Calibration Method

It supports two calibration methods for phasor analysis:

- [IRF shift-based calibration](numerical_feature_extraction.qmd#irf-shift)
- [Reference dye-based calibration](numerical_feature_extraction.qmd#reference-dye)

Since instrumental response function (IRF) or the reference dye are measured for each channel, they are set in the [per-channel configurations](#per-channel-configurations). The reference dye's lifetime is channel-agnostic. 

![](extraction_ui_shots/config_calibration.png){width=100% fig-align=center}

### Number of Channels

Each FOV is assumed to have the same number of channels. The configuration will dynamically adjust the [per-channel configurations](#per-channel-configurations) based on the specified number of channels. Currently, the maximum number of channels is 4, and it can be extended to house more channels.  

## Per-Channel Configurations

### Channel Name

Users can customize the channel name based on, for example, the name of the fluorophore. 

![](extraction_ui_shots/config_channel_name.png){width=100% fig-align=center}

### Imaging Modality

Users can specify the imaging modality for each channel. Currently, two modalities are supported: 

- `FLIM`: The signal is time resolved, i.e., has a time dimension, and expected to be from one of the [decay types](data_extraction_config.qmd#decay-types).
- `Intensity-only`: The signal is a spatial map of intensity values (2 spatial dimensions), i.e., has no time dimension. **Currently, the only supported signal type is a 2D intensity .`tiff/.tif` image.**

![](extraction_ui_shots/config_modality.png){width=20% fig-align=center}

::: {.callout-tip}
This setup allows users to image some channels in FLIM mode, and others in non-FLIM mode. It also allows users to extract and analyze their data if they image in non-FLIM microscopic systems such as epifluorescence, confocal, brightfield, etc. by selecting `Intensity-only` for all channels.
:::

::: {.callout-note}
If the decay type is [2D decay](#two-d-decay), the [imaging modality](#imaging-modality) for all channels is restricted to `FLIM`.
:::

### Feature Extractor

Four types of feature extractors are available if the [imaging modality](#imaging-modality) is `FLIM`:

- [Lifetime fit](#sec-lifetime-fit)
- [Lifetime fit free](#sec-lifetime-fit-free)
- [Intensity Morphology](#sec-intensity-morphology)
- [Intensity Texture](#sec-intensity-texture)

![](extraction_ui_shots/config_feature_extractor.png){width=80% fig-align=center}

::: {.callout-note}
If the decay type is [2D decay](#two-d-decay), the [Intensity Morphology](#sec-intensity-morphology) and [Intensity Texture](#sec-intensity-texture) feature extractors are **not** applicable.
:::

The [Intensity Morphology](#sec-intensity-morphology) and [Intensity Texture](#sec-intensity-texture) feature extractors are available if the [imaging modality](#imaging-modality) is `Intensity-only`.

![](extraction_ui_shots/config_intensity_feature_extractor.png){width=40% fig-align=center}

Each channel can be assigned with its own set of feature extractors. For example, if users do not intend to do lifetime extraction, they can de-select the `Lifetime fit` and `Lifetime fit free` options. 

### Number of Components

If users select the `Lifetime fit` under this channel, they can specify the number of components to fit. 

### File Suffix

The [FOV Metadata Organization](#sec-fov-metadata) step looks for associated input files for all channels of a given FOV using file suffixes. Based on the [decay type](#decay-types), [calibration method](#calibration-method), and the selected [feature extractors](#feature-extractor), the system automatically generates the file suffixes for required input files. 

![](extraction_ui_shots/config_file_suffix.png){width=100% fig-align=center}

In the example above, channels `nadh` and `fad` were asked to provide an IRF file, while channel `cd8` did not, because `Lifetime fit` was selected for the former two channels and not for the latter. The file suffixes of the IRF files were different for each of the two channels, but they shared the same ROI mask file suffix because they used the same ROI mask. The `cd8` channel used a different ROI mask than the other two channels, indicated by the mask file suffix. 

For detailed information on what file formats are supported for each file type (Mask, IRF, etc.), see [input file types](data_extraction.qmd#input-file-types). 

For detailed information on how the file suffixes are used, and what each file type (e.g. `IRF`, `Mask`, etc.) is, see the [FOV Metadata Organization](#sec-fov-metadata) page. 

## Save 
Finally, users can save the configuration for future use by clicking the `Update Configuration` button. 
