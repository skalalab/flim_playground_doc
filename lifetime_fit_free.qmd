# Lifetime Features (Fit-Free)

Phasor analysis provides a fast, model-free view of lifetimes. Mono-exponential decays fall on the universal semicircle while mixtures lie inside as linear combinations, so clusters reveal distinct species and their fractional contributions. FLIM Playground currently extracts cell-level phasor features: `G`, `S`, `Tau_phase`, `Tau_m`, `G_2nd` (2nd harmonic), and `S_2nd`. 

Fit-free features names in the final dataset will have the prefix set to be the combination of the feature extractor name (i.e. `Lifetime fit`) and the channel name, allowing [Data Analysis](data_analysis.qmd) to group the features. For example, `Lifetime fit free_nadh: G` means the $G$ coordinate for this cell in the NAD(P)H channel. The [Phasor analysis](phasor_analysis.qmd) method can take in the final dataset and plot cells in the phasor space for harmonic of choice.  

## Preprocessing

It sums up all the pixel decays belonging to the same cell ROI labeled by the ROI [mask](data_extraction.qmd#mask) as one decay curve [@samimi25]. The phasor features will be calculated from the summed decay curve. 

If the chosen [calibration method](data_extraction_config.qmd#calibration-method) is IRF shift Calibration, FLIM Playground will shift the IRF using the the shift values and subtract the estimated offset as described in the [IRF shift Calibration step](numerical_feature_extraction.qmd#irf-shift). 

## Phasor features

### Phasor coordinates

FLIM Playground uses the `phasor_from_signal` function from the [phasorpy](https://www.phasorpy.org/) package to calculate the uncalibrated phasor coordinates `G_raw` and `S_raw`, `G_raw_2nd` and `S_raw_2nd`, the first and second harmonics' real and imaginary parts, from the cell decay curve.

Either `G_irf`, `S_irf`, `G_irf_2nd`, and `S_irf_2nd` from the IRF, or `ref_mean`, `ref_real`, `ref_imag` from the reference dye, depending on the chosen [calibration method](data_extraction_config.qmd#calibration-method), are calculated using the same function.  

To get the calibrated phasor coordinates `G`, `S`, `G_2nd`, and `S_2nd`, FLIM Playground uses either
```python
from phasorpy import phasor
G, S = phasor.phasor_divide(g_raw, s_raw, g_irf, s_irf)
G_2nd, S_2nd = phasor.phasor_divide(g_raw_2nd, s_raw_2nd, g_irf_2nd, s_irf_2nd)
```
or 
```python
from phasorpy import lifetime
G, S = lifetime.phasor_calibrate(g_raw, s_raw, ref_mean, ref_real, ref_imag, frequency=laser_rate, lifetime=reference_dye_lifetime)
G_2nd, S_2nd = lifetime.phasor_calibrate(g_raw_2nd, s_raw_2nd, ref_mean, ref_real, ref_imag, frequency=laser_rate, lifetime=reference_dye_lifetime, harmonic=2)
```

The `laser_rate` is specified during the [fov metadata extraction](fov_metadata.qmd#laser-frequency) and [config](data_extraction_config.qmd#laser-frequency). 

### Phasor-derived lifetime

`Tau_phase` and `Tau_m` are calculated using the first harmonic's phasor coordinates `G` and `S`. 

```python
import numpy as np
w = 2 * np.pi * laser_rate
phi = np.arctan2(S, G) 
m = np.sqrt(G**2 + S**2)
tau_phase = 1/w * np.tan(phi)
tau_m = 1/w * np.sqrt(1/m**2 - 1)
```

$$
\omega = 2\pi\,h\,f_{\mathrm{rep}} (h = 1), \phi = \operatorname{atan2}(S,\,G), m = \sqrt{G^{2}+S^{2}}, \tau_{\phi} = \frac{\tan \phi}{\omega}, \tau_{M} = \frac{1}{\omega}\sqrt{\frac{1}{m^{2}}-1}
$$